#!/usr/bin/env bash
set -euo pipefail
export CONCOURSE_URL="${CONCOURSE_URL:=https://concourse.halfpipe.io}"
export HALFPIPE_PROJECT="${HALFPIPE_PROJECT:=halfpipe-io}"
export HALFPIPE_DOMAIN="${HALFPIPE_DOMAIN:=halfpipe.io}"

echo "* Halfpipe manifest:"
[[ -f .halfpipe.io ]] && cat .halfpipe.io || cat .halfpipe.io.yml

echo
echo "* STEP 1/7: Updating fly to latest version"
cat >/root/.flyrc << EOF
targets:
  ci:
    api: ${CONCOURSE_URL}
EOF
fly -t ci sync

echo
echo "* STEP 2/7: Updating halfpipe to latest version"
halfpipe sync
echo

echo
echo "* STEP 3/7: Logging into concourse"
fly -t ${CONCOURSE_TEAM} login -c ${CONCOURSE_URL} -n ${CONCOURSE_TEAM} -u ${CONCOURSE_USERNAME} -p ${CONCOURSE_PASSWORD}

echo
echo "* STEP 4/7: Checking pipeline exists named ${PIPELINE_NAME}"
PIPELINE_IS_PAUSED=$(fly -t ${CONCOURSE_TEAM} curl /api/v1/teams/${CONCOURSE_TEAM}/pipelines -- -sS | jq -r "map(select(.name == \"${PIPELINE_NAME}\")) | .[].paused")
if [ "${PIPELINE_IS_PAUSED}" == "" ]; then
  echo "pipeline not found"
  exit 1
else
  echo "found '${PIPELINE_NAME}'. paused = ${PIPELINE_IS_PAUSED}".
fi

echo
echo "* STEP 5/7: Disable all existing enabled versions"
AUTH="Authorization: Bearer$(grep 'value: ' ~/.flyrc | cut -d: -f2)"
VERSION_URL="${CONCOURSE_URL}/api/v1/teams/${CONCOURSE_TEAM}/pipelines/${PIPELINE_NAME}/resources/version/versions"
VERSION_IDS=$(curl -sSH "${AUTH}" ${VERSION_URL} | jq -r 'map(select(.enabled)) | .[1:][].id')
for ID in $VERSION_IDS; do
  echo "disabling version id ${ID}"
  curl -sSH "${AUTH}" -X PUT ${VERSION_URL}/${ID}/disable
done

echo
echo "* STEP 6/7: Updating pipeline"
halfpipe upload -n | tee /tmp/o

echo
echo "* STEP 7/7: Re-enable existing versions if pipeline has not changed"
if grep -q 'configuration updated' /tmp/o; then
  echo 'skipping because pipeline has changed'
else
  for ID in $VERSION_IDS; do
    echo "enabling version id ${ID}"
    curl -sSH "${AUTH}" -X PUT ${VERSION_URL}/${ID}/enable
  done
fi

echo
echo "* Finished"
