#!/usr/bin/env bash
set -euo pipefail

CONCOURSE_URL="${CONCOURSE_URL:=https://concourse.halfpipe.io}"
HALFPIPE_PROJECT="${HALFPIPE_PROJECT:=halfpipe-io}"
HALFPIPE_DOMAIN="${HALFPIPE_DOMAIN:=halfpipe.io}"
BUILD_VERSION="${BUILD_VERSION:=$(cat ${PWD//\/git*/\/version\/version})}"
PIPELINE_CONFIG="/tmp/pipeline.yml"


echo
echo "* Halfpipe manifest:"
cat .halfpipe.io*


echo
echo "* STEP 1/8: Updating fly to latest version"
cat >/root/.flyrc << EOF
targets:
  ci:
    api: ${CONCOURSE_URL}
EOF
fly -t ci sync


echo
echo "* STEP 2/8: Updating halfpipe to latest version"
halfpipe sync
echo


echo
echo "* STEP 3/8: Logging into concourse"
fly -t ${CONCOURSE_TEAM} login -c ${CONCOURSE_URL} -n ${CONCOURSE_TEAM} -u ${CONCOURSE_USERNAME} -p ${CONCOURSE_PASSWORD}


echo
echo "* STEP 4/8: Checking if pipeline exists named ${PIPELINE_NAME}"
if fly -t ${CONCOURSE_TEAM} get-pipeline -p ${PIPELINE_NAME} > /dev/null; then
  echo "found ${PIPELINE_NAME}"
else
  exit 1
fi


echo
echo "* STEP 5/8: Running halfpipe to generate Concourse pipeline"
halfpipe > ${PIPELINE_CONFIG}


echo
echo "* STEP 6/8: Checking if pipeline has changed"
echo | fly -t ${CONCOURSE_TEAM} set-pipeline -p ${PIPELINE_NAME} -c ${PIPELINE_CONFIG} |
  grep 'no changes to apply' &&
  exit 0 ||
  echo "found changes to apply"


echo
echo "* STEP 7/8: Disabling old versions"
VERSIONS_ENDPOINT="/api/v1/teams/${CONCOURSE_TEAM}/pipelines/${PIPELINE_NAME}/resources/version/versions"
VERSION_IDS=$(fly -t ${CONCOURSE_TEAM} curl ${VERSIONS_ENDPOINT} -- -sS | jq -r "map(select(.enabled and .version.number != \"${BUILD_VERSION}\")) | .[].id")
for ID in $VERSION_IDS; do
  echo "disabling version id ${ID}"
  fly -t ${CONCOURSE_TEAM} curl ${VERSIONS_ENDPOINT}/${ID}/disable -- -X PUT -sS
done


echo
echo "* STEP 8/8: Updating pipeline"
fly -t ${CONCOURSE_TEAM} set-pipeline -p ${PIPELINE_NAME} -c ${PIPELINE_CONFIG} --check-creds --non-interactive
