#!/usr/bin/env bash
set -euo pipefail

red='\033[0;31m'
green='\033[0;32m'
reset='\033[0m'

echored() {
  echo -e "${red}$@${reset}"
}

echogreen() {
  echo -e "${green}$@${reset}"
}

CONCOURSE_URL="${CONCOURSE_URL:-https://concourse.halfpipe.io}"
HALFPIPE_FILE_PATH="${HALFPIPE_FILE_PATH:-.halfpipe.io}"
HALFPIPE_ARGS=""
if [ -n "$HALFPIPE_FILE_PATH" ]; then
  HALFPIPE_ARGS="-i $HALFPIPE_FILE_PATH"
fi

PIPELINE_CONFIG="/tmp/pipeline.yml"
SET_PIPELINE_OUTPUT="/tmp/set-pipeline-output"

echo
echogreen "* Halfpipe manifest:"
cat ${HALFPIPE_FILE_PATH:-.halfpipe.io*}

echo
echogreen "* STEP 1/9: Updating fly to latest version"
cat >/root/.flyrc << EOF
  targets:
    ci:
      api: ${CONCOURSE_URL}
EOF
fly -t ci sync


echo
echogreen "* STEP 2/9: Updating halfpipe to latest version"
halfpipe sync
echo
halfpipe version
echo


echo
echogreen "* STEP 3/9: Logging into concourse"
fly -t ${CONCOURSE_TEAM} login -c ${CONCOURSE_URL} -n ${CONCOURSE_TEAM} -u ${CONCOURSE_USERNAME} -p ${CONCOURSE_PASSWORD}

echo
echogreen "* STEP 4/9: Checking pipeline team"
_halfpipe_pipeline_team="$(yq '.team' $HALFPIPE_FILE_PATH)"
if [[ "${_halfpipe_pipeline_team}" != "${CONCOURSE_TEAM}" ]]; then
  echored "Error: Pipeline team has changed (existing:${CONCOURSE_TEAM} new:${_halfpipe_pipeline_team})"
  echored "You cannot update a pipeline in another team. Instead pause or delete the existing pipeline and upload a new one."
  exit 1
else
  echo ${CONCOURSE_TEAM}
fi

echo
echogreen "* STEP 5/9: Checking pipeline name"
_halfpipe_pipeline_name="$(halfpipe pipeline-name $HALFPIPE_ARGS | tr -d '\n')"
if [[ "${_halfpipe_pipeline_name}" != "${PIPELINE_NAME}" ]]; then
  echored "Error: Pipeline name has changed (existing:${PIPELINE_NAME} new:${_halfpipe_pipeline_name})"
  echored "Pipeline must first be renamed with fly:"
  echored "  fly -t ${CONCOURSE_TEAM} rename-pipeline -o ${PIPELINE_NAME} -n ${_halfpipe_pipeline_name}"
  exit 1
else
  echogreen "ok"
fi

echo
echogreen "* STEP 6/9: Running halfpipe to generate Concourse pipeline"
halfpipe $HALFPIPE_ARGS > ${PIPELINE_CONFIG}


echo
echogreen "* STEP 7/9: Checking if pipeline has changed"
echo | fly -t ${CONCOURSE_TEAM} set-pipeline -p ${PIPELINE_NAME} -c ${PIPELINE_CONFIG} > ${SET_PIPELINE_OUTPUT}
if grep 'no changes to apply' ${SET_PIPELINE_OUTPUT}; then
  echo
  echogreen "Finished!"
  exit 0
else
  echo "found changes to apply"
fi


echo
echogreen "* STEP 8/9: Disabling old versions if new jobs added"
if grep -Eo 'job.+has been added' ${SET_PIPELINE_OUTPUT}; then
  ENABLED_VERSIONS=$(fly -t ${CONCOURSE_TEAM} resource-versions -r ${PIPELINE_NAME}/version --json --count=9999999 | jq -r "map(select(.enabled)) | .[].version.number")
  for VER in $ENABLED_VERSIONS; do
    fly -t ${CONCOURSE_TEAM} disable-resource-version -r ${PIPELINE_NAME}/version -v number:${VER}
  done
else
  echo "no jobs added"
fi


echo
echogreen "* STEP 9/9: Updating pipeline"
fly -t ${CONCOURSE_TEAM} set-pipeline -p ${PIPELINE_NAME} -c ${PIPELINE_CONFIG} --check-creds --non-interactive

echo
echo
echogreen "Finished!"
